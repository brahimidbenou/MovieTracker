@page "/Login"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using FrontEnd.Components.Shared
@inject Login user
@inject AuthProvider AuthStateProvider


<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Se connecter</title>
    <!-- Lien vers Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <EditForm FormName="connexion" Model="@OldUser" OnValidSubmit="LoginAction">
            <h2 class="mb-4">Se connecter</h2>
            <div class="mb-3">
                <label for="login" class="form-label">Nom</label>
                <input type="text" id="login" class="form-control" @bind-value="OldUser.Nom" placeholder="Entrez votre nom">
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Mot de passe</label>
                <input type="password" id="password" class="form-control" @bind-value="OldUser.MotDePasse" placeholder="Entrez votre mot de passe">
            </div>
            <button type="submit" class="btn btn-primary w-100">Se connecter</button>
        </EditForm>
    </div>
    <!-- Lien vers Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


@code {

    private Userinfo OldUser = new();

    private async Task LoginAction()
    {
        var userAndJwt = await user.SignIn(OldUser); 
        
        if (userAndJwt != null) 
        {
            var user = userAndJwt.User ?? null;
            var token = userAndJwt.Jeton ?? null;

            if (user != null && token != null)
            {
                await AuthStateProvider.Login(user, token); 
                Console.WriteLine("Connexion réussie !");
                if (await getAdmin()) 
                {
                    NavigationManager.NavigateTo("/Admin");
                }
                else 
                {
                    NavigationManager.NavigateTo("/");
                }
                 
            }
            else
            {
                Console.WriteLine("Échec de la connexion: Invalid credentials.");
            }
        }
        else
        {
            Console.WriteLine("Échec de la connexion: API error.");
        }
    }

    // Redirection si l'utilisateur est déjà connecté
    protected override async Task OnInitializedAsync()
    {
        var returnUrl = GetQueryParm("ReturnUrl");
        if (returnUrl != "")
        {
            var isLogged = await AuthStateProvider.GetAuthenticationStateAsync();
            if (isLogged.User.Identity is not null && isLogged.User.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo(returnUrl);
            }
        }
    }
    
    string GetQueryParm(string parmName)
    {
        var uriBuilder = new UriBuilder(NavigationManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }
    // Fin de la redirection

    private async Task<bool> getAdmin(){
        return (await AuthStateProvider.GetAdmin() == "Admin") ;
    }
    
/*
    private async Task HandleSignIn() {
        var result = await user.SignIn(OldUser);
        if (result != null)
        {
            Console.WriteLine("Connexion réussie !");
            NavigationManager.NavigateTo("/Favorites");
        }
        else
        {
            Console.WriteLine("Échec de la connexion.");
        } 
    }
*/
}